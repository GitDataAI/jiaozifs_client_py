# coding: utf-8
"""
    jiaozifs API

    jiaozifs HTTP API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
from __future__ import absolute_import

import hashlib
import hmac
import base64
import urllib.parse
import requests
from datetime import datetime

ACCESS_KEY_KEY = "JiaozifsAccessKeyId"
SIGNATURE_VERSION_KEY = "SignatureVersion"
SIGNATURE_METHOD_KEY = "SignatureMethod"
TIMESTAMP_KEY = "Timestamp"
SIGNATURE_KEY = "Signature"

SIGNATURE_VERSION = "0"
SIGNATURE_METHOD = "HmacSHA256"
TIME_FORMAT = "%Y-%m-%dT%H:%M:%SZ"

class V0Signer:
    def __init__(self, access_key, secret_key):
        self.access_key = access_key
        self.secret_key = secret_key

    def sign(self, url, method, headers, queryParams):
        cur_time = datetime.utcnow().strftime(TIME_FORMAT)
        query = {key: value for key, value in queryParams}
        query[ACCESS_KEY_KEY] = self.access_key
        query[SIGNATURE_VERSION_KEY] = SIGNATURE_VERSION
        query[SIGNATURE_METHOD_KEY] = SIGNATURE_METHOD
        query[TIMESTAMP_KEY] = cur_time


        headers.pop("Signature", None)

        method = method
        url_parts = urllib.parse.urlsplit(url)
        path = url_parts.path
        if not path:
            path = "/"

        query_keys = sorted(query.keys())
        query_keys_and_values = []
        for key in query_keys:
            k = urllib.parse.quote(key, safe="")
            v = urllib.parse.quote(query[key], safe="")
            query_keys_and_values.append(f"{k}={v}")
        query_string = "&".join(query_keys_and_values)

        string_to_sign = "\n".join([method, url_parts.hostname, path, query_string])

        signature = base64.b64encode(hmac.new(
            self.secret_key.encode("utf-8"),
            string_to_sign.encode("utf-8"),
            hashlib.sha256
        ).digest()).decode("utf-8")
        query[SIGNATURE_KEY] = signature
        return query
