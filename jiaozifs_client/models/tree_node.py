# coding: utf-8

"""
    jiaozifs API

    jiaozifs HTTP API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TreeNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hash': 'str',
        'repository_id': 'str',
        'type': 'int',
        'properties': 'dict(str, str)',
        'sub_objects': 'list[TreeEntry]',
        'created_at': 'int',
        'updated_at': 'int'
    }

    attribute_map = {
        'hash': 'hash',
        'repository_id': 'repository_id',
        'type': 'type',
        'properties': 'properties',
        'sub_objects': 'sub_objects',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, hash=None, repository_id=None, type=None, properties=None, sub_objects=None, created_at=None, updated_at=None):  # noqa: E501
        """TreeNode - a model defined in Swagger"""  # noqa: E501
        self._hash = None
        self._repository_id = None
        self._type = None
        self._properties = None
        self._sub_objects = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.hash = hash
        self.repository_id = repository_id
        self.type = type
        self.properties = properties
        self.sub_objects = sub_objects
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def hash(self):
        """Gets the hash of this TreeNode.  # noqa: E501


        :return: The hash of this TreeNode.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this TreeNode.


        :param hash: The hash of this TreeNode.  # noqa: E501
        :type: str
        """
        if hash is None:
            raise ValueError("Invalid value for `hash`, must not be `None`")  # noqa: E501

        self._hash = hash

    @property
    def repository_id(self):
        """Gets the repository_id of this TreeNode.  # noqa: E501


        :return: The repository_id of this TreeNode.  # noqa: E501
        :rtype: str
        """
        return self._repository_id

    @repository_id.setter
    def repository_id(self, repository_id):
        """Sets the repository_id of this TreeNode.


        :param repository_id: The repository_id of this TreeNode.  # noqa: E501
        :type: str
        """
        if repository_id is None:
            raise ValueError("Invalid value for `repository_id`, must not be `None`")  # noqa: E501

        self._repository_id = repository_id

    @property
    def type(self):
        """Gets the type of this TreeNode.  # noqa: E501


        :return: The type of this TreeNode.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TreeNode.


        :param type: The type of this TreeNode.  # noqa: E501
        :type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def properties(self):
        """Gets the properties of this TreeNode.  # noqa: E501


        :return: The properties of this TreeNode.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this TreeNode.


        :param properties: The properties of this TreeNode.  # noqa: E501
        :type: dict(str, str)
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    @property
    def sub_objects(self):
        """Gets the sub_objects of this TreeNode.  # noqa: E501


        :return: The sub_objects of this TreeNode.  # noqa: E501
        :rtype: list[TreeEntry]
        """
        return self._sub_objects

    @sub_objects.setter
    def sub_objects(self, sub_objects):
        """Sets the sub_objects of this TreeNode.


        :param sub_objects: The sub_objects of this TreeNode.  # noqa: E501
        :type: list[TreeEntry]
        """
        if sub_objects is None:
            raise ValueError("Invalid value for `sub_objects`, must not be `None`")  # noqa: E501

        self._sub_objects = sub_objects

    @property
    def created_at(self):
        """Gets the created_at of this TreeNode.  # noqa: E501


        :return: The created_at of this TreeNode.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TreeNode.


        :param created_at: The created_at of this TreeNode.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this TreeNode.  # noqa: E501


        :return: The updated_at of this TreeNode.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TreeNode.


        :param updated_at: The updated_at of this TreeNode.  # noqa: E501
        :type: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TreeNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TreeNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
