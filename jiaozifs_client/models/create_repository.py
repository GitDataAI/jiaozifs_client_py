# coding: utf-8

"""
    jiaozifs API

    jiaozifs HTTP API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateRepository(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'name': 'str',
        'visible': 'bool',
        'blockstore_config': 'str'
    }

    attribute_map = {
        'description': 'description',
        'name': 'name',
        'visible': 'visible',
        'blockstore_config': 'blockstore_config'
    }

    def __init__(self, description=None, name=None, visible=None, blockstore_config=None):  # noqa: E501
        """CreateRepository - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._name = None
        self._visible = None
        self._blockstore_config = None
        self.discriminator = None
        if description is not None:
            self.description = description
        self.name = name
        if visible is not None:
            self.visible = visible
        if blockstore_config is not None:
            self.blockstore_config = blockstore_config

    @property
    def description(self):
        """Gets the description of this CreateRepository.  # noqa: E501


        :return: The description of this CreateRepository.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateRepository.


        :param description: The description of this CreateRepository.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this CreateRepository.  # noqa: E501


        :return: The name of this CreateRepository.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateRepository.


        :param name: The name of this CreateRepository.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def visible(self):
        """Gets the visible of this CreateRepository.  # noqa: E501


        :return: The visible of this CreateRepository.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this CreateRepository.


        :param visible: The visible of this CreateRepository.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def blockstore_config(self):
        """Gets the blockstore_config of this CreateRepository.  # noqa: E501

        block storage config url encoded json  # noqa: E501

        :return: The blockstore_config of this CreateRepository.  # noqa: E501
        :rtype: str
        """
        return self._blockstore_config

    @blockstore_config.setter
    def blockstore_config(self, blockstore_config):
        """Sets the blockstore_config of this CreateRepository.

        block storage config url encoded json  # noqa: E501

        :param blockstore_config: The blockstore_config of this CreateRepository.  # noqa: E501
        :type: str
        """

        self._blockstore_config = blockstore_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateRepository, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateRepository):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
