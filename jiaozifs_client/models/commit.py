# coding: utf-8

"""
    jiaozifs API

    jiaozifs HTTP API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Commit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hash': 'str',
        'repository_id': 'str',
        'author': 'Signature',
        'committer': 'Signature',
        'merge_tag': 'str',
        'message': 'str',
        'tree_hash': 'str',
        'parent_hashes': 'list[str]',
        'created_at': 'int',
        'updated_at': 'int'
    }

    attribute_map = {
        'hash': 'hash',
        'repository_id': 'repository_id',
        'author': 'author',
        'committer': 'committer',
        'merge_tag': 'merge_tag',
        'message': 'message',
        'tree_hash': 'tree_hash',
        'parent_hashes': 'parent_hashes',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, hash=None, repository_id=None, author=None, committer=None, merge_tag=None, message=None, tree_hash=None, parent_hashes=None, created_at=None, updated_at=None):  # noqa: E501
        """Commit - a model defined in Swagger"""  # noqa: E501
        self._hash = None
        self._repository_id = None
        self._author = None
        self._committer = None
        self._merge_tag = None
        self._message = None
        self._tree_hash = None
        self._parent_hashes = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.hash = hash
        self.repository_id = repository_id
        self.author = author
        self.committer = committer
        self.merge_tag = merge_tag
        self.message = message
        self.tree_hash = tree_hash
        self.parent_hashes = parent_hashes
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def hash(self):
        """Gets the hash of this Commit.  # noqa: E501


        :return: The hash of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this Commit.


        :param hash: The hash of this Commit.  # noqa: E501
        :type: str
        """
        if hash is None:
            raise ValueError("Invalid value for `hash`, must not be `None`")  # noqa: E501

        self._hash = hash

    @property
    def repository_id(self):
        """Gets the repository_id of this Commit.  # noqa: E501


        :return: The repository_id of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._repository_id

    @repository_id.setter
    def repository_id(self, repository_id):
        """Sets the repository_id of this Commit.


        :param repository_id: The repository_id of this Commit.  # noqa: E501
        :type: str
        """
        if repository_id is None:
            raise ValueError("Invalid value for `repository_id`, must not be `None`")  # noqa: E501

        self._repository_id = repository_id

    @property
    def author(self):
        """Gets the author of this Commit.  # noqa: E501


        :return: The author of this Commit.  # noqa: E501
        :rtype: Signature
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Commit.


        :param author: The author of this Commit.  # noqa: E501
        :type: Signature
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def committer(self):
        """Gets the committer of this Commit.  # noqa: E501


        :return: The committer of this Commit.  # noqa: E501
        :rtype: Signature
        """
        return self._committer

    @committer.setter
    def committer(self, committer):
        """Sets the committer of this Commit.


        :param committer: The committer of this Commit.  # noqa: E501
        :type: Signature
        """
        if committer is None:
            raise ValueError("Invalid value for `committer`, must not be `None`")  # noqa: E501

        self._committer = committer

    @property
    def merge_tag(self):
        """Gets the merge_tag of this Commit.  # noqa: E501


        :return: The merge_tag of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._merge_tag

    @merge_tag.setter
    def merge_tag(self, merge_tag):
        """Sets the merge_tag of this Commit.


        :param merge_tag: The merge_tag of this Commit.  # noqa: E501
        :type: str
        """
        if merge_tag is None:
            raise ValueError("Invalid value for `merge_tag`, must not be `None`")  # noqa: E501

        self._merge_tag = merge_tag

    @property
    def message(self):
        """Gets the message of this Commit.  # noqa: E501


        :return: The message of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Commit.


        :param message: The message of this Commit.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def tree_hash(self):
        """Gets the tree_hash of this Commit.  # noqa: E501


        :return: The tree_hash of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._tree_hash

    @tree_hash.setter
    def tree_hash(self, tree_hash):
        """Sets the tree_hash of this Commit.


        :param tree_hash: The tree_hash of this Commit.  # noqa: E501
        :type: str
        """
        if tree_hash is None:
            raise ValueError("Invalid value for `tree_hash`, must not be `None`")  # noqa: E501

        self._tree_hash = tree_hash

    @property
    def parent_hashes(self):
        """Gets the parent_hashes of this Commit.  # noqa: E501


        :return: The parent_hashes of this Commit.  # noqa: E501
        :rtype: list[str]
        """
        return self._parent_hashes

    @parent_hashes.setter
    def parent_hashes(self, parent_hashes):
        """Sets the parent_hashes of this Commit.


        :param parent_hashes: The parent_hashes of this Commit.  # noqa: E501
        :type: list[str]
        """
        if parent_hashes is None:
            raise ValueError("Invalid value for `parent_hashes`, must not be `None`")  # noqa: E501

        self._parent_hashes = parent_hashes

    @property
    def created_at(self):
        """Gets the created_at of this Commit.  # noqa: E501


        :return: The created_at of this Commit.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Commit.


        :param created_at: The created_at of this Commit.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Commit.  # noqa: E501


        :return: The updated_at of this Commit.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Commit.


        :param updated_at: The updated_at of this Commit.  # noqa: E501
        :type: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Commit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Commit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
