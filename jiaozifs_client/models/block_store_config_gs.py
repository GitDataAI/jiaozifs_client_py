# coding: utf-8

"""
    jiaozifs API

    jiaozifs HTTP API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BlockStoreConfigGs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credentials_json': 'str',
        's3_endpoint': 'str'
    }

    attribute_map = {
        'credentials_json': 'credentials_json',
        's3_endpoint': 's3_endpoint'
    }

    def __init__(self, credentials_json=None, s3_endpoint=None):  # noqa: E501
        """BlockStoreConfigGs - a model defined in Swagger"""  # noqa: E501
        self._credentials_json = None
        self._s3_endpoint = None
        self.discriminator = None
        self.credentials_json = credentials_json
        self.s3_endpoint = s3_endpoint

    @property
    def credentials_json(self):
        """Gets the credentials_json of this BlockStoreConfigGs.  # noqa: E501


        :return: The credentials_json of this BlockStoreConfigGs.  # noqa: E501
        :rtype: str
        """
        return self._credentials_json

    @credentials_json.setter
    def credentials_json(self, credentials_json):
        """Sets the credentials_json of this BlockStoreConfigGs.


        :param credentials_json: The credentials_json of this BlockStoreConfigGs.  # noqa: E501
        :type: str
        """
        if credentials_json is None:
            raise ValueError("Invalid value for `credentials_json`, must not be `None`")  # noqa: E501

        self._credentials_json = credentials_json

    @property
    def s3_endpoint(self):
        """Gets the s3_endpoint of this BlockStoreConfigGs.  # noqa: E501


        :return: The s3_endpoint of this BlockStoreConfigGs.  # noqa: E501
        :rtype: str
        """
        return self._s3_endpoint

    @s3_endpoint.setter
    def s3_endpoint(self, s3_endpoint):
        """Sets the s3_endpoint of this BlockStoreConfigGs.


        :param s3_endpoint: The s3_endpoint of this BlockStoreConfigGs.  # noqa: E501
        :type: str
        """
        if s3_endpoint is None:
            raise ValueError("Invalid value for `s3_endpoint`, must not be `None`")  # noqa: E501

        self._s3_endpoint = s3_endpoint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BlockStoreConfigGs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlockStoreConfigGs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
