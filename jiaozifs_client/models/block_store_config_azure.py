# coding: utf-8

"""
    jiaozifs API

    jiaozifs HTTP API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BlockStoreConfigAzure(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'storage_access_key': 'str',
        'storage_account': 'str',
        'try_timeout': 'int'
    }

    attribute_map = {
        'storage_access_key': 'storage_access_key',
        'storage_account': 'storage_account',
        'try_timeout': 'try_timeout'
    }

    def __init__(self, storage_access_key=None, storage_account=None, try_timeout=None):  # noqa: E501
        """BlockStoreConfigAzure - a model defined in Swagger"""  # noqa: E501
        self._storage_access_key = None
        self._storage_account = None
        self._try_timeout = None
        self.discriminator = None
        self.storage_access_key = storage_access_key
        self.storage_account = storage_account
        self.try_timeout = try_timeout

    @property
    def storage_access_key(self):
        """Gets the storage_access_key of this BlockStoreConfigAzure.  # noqa: E501


        :return: The storage_access_key of this BlockStoreConfigAzure.  # noqa: E501
        :rtype: str
        """
        return self._storage_access_key

    @storage_access_key.setter
    def storage_access_key(self, storage_access_key):
        """Sets the storage_access_key of this BlockStoreConfigAzure.


        :param storage_access_key: The storage_access_key of this BlockStoreConfigAzure.  # noqa: E501
        :type: str
        """
        if storage_access_key is None:
            raise ValueError("Invalid value for `storage_access_key`, must not be `None`")  # noqa: E501

        self._storage_access_key = storage_access_key

    @property
    def storage_account(self):
        """Gets the storage_account of this BlockStoreConfigAzure.  # noqa: E501


        :return: The storage_account of this BlockStoreConfigAzure.  # noqa: E501
        :rtype: str
        """
        return self._storage_account

    @storage_account.setter
    def storage_account(self, storage_account):
        """Sets the storage_account of this BlockStoreConfigAzure.


        :param storage_account: The storage_account of this BlockStoreConfigAzure.  # noqa: E501
        :type: str
        """
        if storage_account is None:
            raise ValueError("Invalid value for `storage_account`, must not be `None`")  # noqa: E501

        self._storage_account = storage_account

    @property
    def try_timeout(self):
        """Gets the try_timeout of this BlockStoreConfigAzure.  # noqa: E501


        :return: The try_timeout of this BlockStoreConfigAzure.  # noqa: E501
        :rtype: int
        """
        return self._try_timeout

    @try_timeout.setter
    def try_timeout(self, try_timeout):
        """Sets the try_timeout of this BlockStoreConfigAzure.


        :param try_timeout: The try_timeout of this BlockStoreConfigAzure.  # noqa: E501
        :type: int
        """
        if try_timeout is None:
            raise ValueError("Invalid value for `try_timeout`, must not be `None`")  # noqa: E501

        self._try_timeout = try_timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BlockStoreConfigAzure, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlockStoreConfigAzure):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
