# coding: utf-8

"""
    jiaozifs API

    jiaozifs HTTP API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChangePair(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'str',
        'left': 'Change',
        'right': 'Change',
        'is_conflict': 'bool'
    }

    attribute_map = {
        'path': 'path',
        'left': 'left',
        'right': 'right',
        'is_conflict': 'is_conflict'
    }

    def __init__(self, path=None, left=None, right=None, is_conflict=None):  # noqa: E501
        """ChangePair - a model defined in Swagger"""  # noqa: E501
        self._path = None
        self._left = None
        self._right = None
        self._is_conflict = None
        self.discriminator = None
        self.path = path
        if left is not None:
            self.left = left
        if right is not None:
            self.right = right
        self.is_conflict = is_conflict

    @property
    def path(self):
        """Gets the path of this ChangePair.  # noqa: E501


        :return: The path of this ChangePair.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ChangePair.


        :param path: The path of this ChangePair.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def left(self):
        """Gets the left of this ChangePair.  # noqa: E501


        :return: The left of this ChangePair.  # noqa: E501
        :rtype: Change
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this ChangePair.


        :param left: The left of this ChangePair.  # noqa: E501
        :type: Change
        """

        self._left = left

    @property
    def right(self):
        """Gets the right of this ChangePair.  # noqa: E501


        :return: The right of this ChangePair.  # noqa: E501
        :rtype: Change
        """
        return self._right

    @right.setter
    def right(self, right):
        """Sets the right of this ChangePair.


        :param right: The right of this ChangePair.  # noqa: E501
        :type: Change
        """

        self._right = right

    @property
    def is_conflict(self):
        """Gets the is_conflict of this ChangePair.  # noqa: E501


        :return: The is_conflict of this ChangePair.  # noqa: E501
        :rtype: bool
        """
        return self._is_conflict

    @is_conflict.setter
    def is_conflict(self, is_conflict):
        """Sets the is_conflict of this ChangePair.


        :param is_conflict: The is_conflict of this ChangePair.  # noqa: E501
        :type: bool
        """
        if is_conflict is None:
            raise ValueError("Invalid value for `is_conflict`, must not be `None`")  # noqa: E501

        self._is_conflict = is_conflict

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChangePair, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangePair):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
