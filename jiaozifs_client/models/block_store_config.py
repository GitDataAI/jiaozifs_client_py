# coding: utf-8

"""
    jiaozifs API

    jiaozifs HTTP API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BlockStoreConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'default_namespace_prefix': 'str',
        'local': 'BlockStoreConfigLocal',
        'azure': 'BlockStoreConfigAzure',
        'gs': 'BlockStoreConfigGs',
        's3': 'BlockStoreConfigS3'
    }

    attribute_map = {
        'type': 'type',
        'default_namespace_prefix': 'default_namespace_prefix',
        'local': 'local',
        'azure': 'azure',
        'gs': 'gs',
        's3': 's3'
    }

    def __init__(self, type=None, default_namespace_prefix=None, local=None, azure=None, gs=None, s3=None):  # noqa: E501
        """BlockStoreConfig - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._default_namespace_prefix = None
        self._local = None
        self._azure = None
        self._gs = None
        self._s3 = None
        self.discriminator = None
        self.type = type
        if default_namespace_prefix is not None:
            self.default_namespace_prefix = default_namespace_prefix
        if local is not None:
            self.local = local
        if azure is not None:
            self.azure = azure
        if gs is not None:
            self.gs = gs
        if s3 is not None:
            self.s3 = s3

    @property
    def type(self):
        """Gets the type of this BlockStoreConfig.  # noqa: E501

        type of support storage type  # noqa: E501

        :return: The type of this BlockStoreConfig.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BlockStoreConfig.

        type of support storage type  # noqa: E501

        :param type: The type of this BlockStoreConfig.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["local", "gs", "azure", "s3"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def default_namespace_prefix(self):
        """Gets the default_namespace_prefix of this BlockStoreConfig.  # noqa: E501


        :return: The default_namespace_prefix of this BlockStoreConfig.  # noqa: E501
        :rtype: str
        """
        return self._default_namespace_prefix

    @default_namespace_prefix.setter
    def default_namespace_prefix(self, default_namespace_prefix):
        """Sets the default_namespace_prefix of this BlockStoreConfig.


        :param default_namespace_prefix: The default_namespace_prefix of this BlockStoreConfig.  # noqa: E501
        :type: str
        """

        self._default_namespace_prefix = default_namespace_prefix

    @property
    def local(self):
        """Gets the local of this BlockStoreConfig.  # noqa: E501


        :return: The local of this BlockStoreConfig.  # noqa: E501
        :rtype: BlockStoreConfigLocal
        """
        return self._local

    @local.setter
    def local(self, local):
        """Sets the local of this BlockStoreConfig.


        :param local: The local of this BlockStoreConfig.  # noqa: E501
        :type: BlockStoreConfigLocal
        """

        self._local = local

    @property
    def azure(self):
        """Gets the azure of this BlockStoreConfig.  # noqa: E501


        :return: The azure of this BlockStoreConfig.  # noqa: E501
        :rtype: BlockStoreConfigAzure
        """
        return self._azure

    @azure.setter
    def azure(self, azure):
        """Sets the azure of this BlockStoreConfig.


        :param azure: The azure of this BlockStoreConfig.  # noqa: E501
        :type: BlockStoreConfigAzure
        """

        self._azure = azure

    @property
    def gs(self):
        """Gets the gs of this BlockStoreConfig.  # noqa: E501


        :return: The gs of this BlockStoreConfig.  # noqa: E501
        :rtype: BlockStoreConfigGs
        """
        return self._gs

    @gs.setter
    def gs(self, gs):
        """Sets the gs of this BlockStoreConfig.


        :param gs: The gs of this BlockStoreConfig.  # noqa: E501
        :type: BlockStoreConfigGs
        """

        self._gs = gs

    @property
    def s3(self):
        """Gets the s3 of this BlockStoreConfig.  # noqa: E501


        :return: The s3 of this BlockStoreConfig.  # noqa: E501
        :rtype: BlockStoreConfigS3
        """
        return self._s3

    @s3.setter
    def s3(self, s3):
        """Sets the s3 of this BlockStoreConfig.


        :param s3: The s3 of this BlockStoreConfig.  # noqa: E501
        :type: BlockStoreConfigS3
        """

        self._s3 = s3

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BlockStoreConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlockStoreConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
