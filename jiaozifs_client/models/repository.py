# coding: utf-8

"""
    jiaozifs API

    jiaozifs HTTP API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Repository(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'owner_id': 'str',
        'visible': 'bool',
        'head': 'str',
        'use_public_storage': 'bool',
        'storage_adapter_params': 'str',
        'storage_namespace': 'str',
        'description': 'str',
        'creator_id': 'str',
        'created_at': 'int',
        'updated_at': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'owner_id': 'owner_id',
        'visible': 'visible',
        'head': 'head',
        'use_public_storage': 'use_public_storage',
        'storage_adapter_params': 'storage_adapter_params',
        'storage_namespace': 'storage_namespace',
        'description': 'description',
        'creator_id': 'creator_id',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, name=None, owner_id=None, visible=None, head=None, use_public_storage=None, storage_adapter_params=None, storage_namespace=None, description=None, creator_id=None, created_at=None, updated_at=None):  # noqa: E501
        """Repository - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._owner_id = None
        self._visible = None
        self._head = None
        self._use_public_storage = None
        self._storage_adapter_params = None
        self._storage_namespace = None
        self._description = None
        self._creator_id = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.owner_id = owner_id
        self.visible = visible
        self.head = head
        self.use_public_storage = use_public_storage
        if storage_adapter_params is not None:
            self.storage_adapter_params = storage_adapter_params
        if storage_namespace is not None:
            self.storage_namespace = storage_namespace
        if description is not None:
            self.description = description
        self.creator_id = creator_id
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this Repository.  # noqa: E501


        :return: The id of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Repository.


        :param id: The id of this Repository.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Repository.  # noqa: E501


        :return: The name of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Repository.


        :param name: The name of this Repository.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def owner_id(self):
        """Gets the owner_id of this Repository.  # noqa: E501


        :return: The owner_id of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Repository.


        :param owner_id: The owner_id of this Repository.  # noqa: E501
        :type: str
        """
        if owner_id is None:
            raise ValueError("Invalid value for `owner_id`, must not be `None`")  # noqa: E501

        self._owner_id = owner_id

    @property
    def visible(self):
        """Gets the visible of this Repository.  # noqa: E501


        :return: The visible of this Repository.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this Repository.


        :param visible: The visible of this Repository.  # noqa: E501
        :type: bool
        """
        if visible is None:
            raise ValueError("Invalid value for `visible`, must not be `None`")  # noqa: E501

        self._visible = visible

    @property
    def head(self):
        """Gets the head of this Repository.  # noqa: E501


        :return: The head of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._head

    @head.setter
    def head(self, head):
        """Sets the head of this Repository.


        :param head: The head of this Repository.  # noqa: E501
        :type: str
        """
        if head is None:
            raise ValueError("Invalid value for `head`, must not be `None`")  # noqa: E501

        self._head = head

    @property
    def use_public_storage(self):
        """Gets the use_public_storage of this Repository.  # noqa: E501


        :return: The use_public_storage of this Repository.  # noqa: E501
        :rtype: bool
        """
        return self._use_public_storage

    @use_public_storage.setter
    def use_public_storage(self, use_public_storage):
        """Sets the use_public_storage of this Repository.


        :param use_public_storage: The use_public_storage of this Repository.  # noqa: E501
        :type: bool
        """
        if use_public_storage is None:
            raise ValueError("Invalid value for `use_public_storage`, must not be `None`")  # noqa: E501

        self._use_public_storage = use_public_storage

    @property
    def storage_adapter_params(self):
        """Gets the storage_adapter_params of this Repository.  # noqa: E501


        :return: The storage_adapter_params of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._storage_adapter_params

    @storage_adapter_params.setter
    def storage_adapter_params(self, storage_adapter_params):
        """Sets the storage_adapter_params of this Repository.


        :param storage_adapter_params: The storage_adapter_params of this Repository.  # noqa: E501
        :type: str
        """

        self._storage_adapter_params = storage_adapter_params

    @property
    def storage_namespace(self):
        """Gets the storage_namespace of this Repository.  # noqa: E501


        :return: The storage_namespace of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._storage_namespace

    @storage_namespace.setter
    def storage_namespace(self, storage_namespace):
        """Sets the storage_namespace of this Repository.


        :param storage_namespace: The storage_namespace of this Repository.  # noqa: E501
        :type: str
        """

        self._storage_namespace = storage_namespace

    @property
    def description(self):
        """Gets the description of this Repository.  # noqa: E501


        :return: The description of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Repository.


        :param description: The description of this Repository.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def creator_id(self):
        """Gets the creator_id of this Repository.  # noqa: E501


        :return: The creator_id of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this Repository.


        :param creator_id: The creator_id of this Repository.  # noqa: E501
        :type: str
        """
        if creator_id is None:
            raise ValueError("Invalid value for `creator_id`, must not be `None`")  # noqa: E501

        self._creator_id = creator_id

    @property
    def created_at(self):
        """Gets the created_at of this Repository.  # noqa: E501


        :return: The created_at of this Repository.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Repository.


        :param created_at: The created_at of this Repository.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Repository.  # noqa: E501


        :return: The updated_at of this Repository.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Repository.


        :param updated_at: The updated_at of this Repository.  # noqa: E501
        :type: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Repository, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Repository):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
