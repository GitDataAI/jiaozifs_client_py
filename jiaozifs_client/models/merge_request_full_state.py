# coding: utf-8

"""
    jiaozifs API

    jiaozifs HTTP API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MergeRequestFullState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'sequence': 'int',
        'target_branch': 'str',
        'source_branch': 'str',
        'source_repo_id': 'str',
        'target_repo_id': 'str',
        'title': 'str',
        'merge_status': 'int',
        'description': 'str',
        'author_id': 'str',
        'changes': 'list[ChangePair]',
        'created_at': 'int',
        'updated_at': 'int'
    }

    attribute_map = {
        'id': 'id',
        'sequence': 'sequence',
        'target_branch': 'target_branch',
        'source_branch': 'source_branch',
        'source_repo_id': 'source_repo_id',
        'target_repo_id': 'target_repo_id',
        'title': 'title',
        'merge_status': 'merge_status',
        'description': 'description',
        'author_id': 'author_id',
        'changes': 'changes',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, sequence=None, target_branch=None, source_branch=None, source_repo_id=None, target_repo_id=None, title=None, merge_status=None, description=None, author_id=None, changes=None, created_at=None, updated_at=None):  # noqa: E501
        """MergeRequestFullState - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._sequence = None
        self._target_branch = None
        self._source_branch = None
        self._source_repo_id = None
        self._target_repo_id = None
        self._title = None
        self._merge_status = None
        self._description = None
        self._author_id = None
        self._changes = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        self.sequence = sequence
        self.target_branch = target_branch
        self.source_branch = source_branch
        self.source_repo_id = source_repo_id
        self.target_repo_id = target_repo_id
        self.title = title
        self.merge_status = merge_status
        if description is not None:
            self.description = description
        self.author_id = author_id
        self.changes = changes
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this MergeRequestFullState.  # noqa: E501


        :return: The id of this MergeRequestFullState.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MergeRequestFullState.


        :param id: The id of this MergeRequestFullState.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def sequence(self):
        """Gets the sequence of this MergeRequestFullState.  # noqa: E501


        :return: The sequence of this MergeRequestFullState.  # noqa: E501
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this MergeRequestFullState.


        :param sequence: The sequence of this MergeRequestFullState.  # noqa: E501
        :type: int
        """
        if sequence is None:
            raise ValueError("Invalid value for `sequence`, must not be `None`")  # noqa: E501

        self._sequence = sequence

    @property
    def target_branch(self):
        """Gets the target_branch of this MergeRequestFullState.  # noqa: E501


        :return: The target_branch of this MergeRequestFullState.  # noqa: E501
        :rtype: str
        """
        return self._target_branch

    @target_branch.setter
    def target_branch(self, target_branch):
        """Sets the target_branch of this MergeRequestFullState.


        :param target_branch: The target_branch of this MergeRequestFullState.  # noqa: E501
        :type: str
        """
        if target_branch is None:
            raise ValueError("Invalid value for `target_branch`, must not be `None`")  # noqa: E501

        self._target_branch = target_branch

    @property
    def source_branch(self):
        """Gets the source_branch of this MergeRequestFullState.  # noqa: E501


        :return: The source_branch of this MergeRequestFullState.  # noqa: E501
        :rtype: str
        """
        return self._source_branch

    @source_branch.setter
    def source_branch(self, source_branch):
        """Sets the source_branch of this MergeRequestFullState.


        :param source_branch: The source_branch of this MergeRequestFullState.  # noqa: E501
        :type: str
        """
        if source_branch is None:
            raise ValueError("Invalid value for `source_branch`, must not be `None`")  # noqa: E501

        self._source_branch = source_branch

    @property
    def source_repo_id(self):
        """Gets the source_repo_id of this MergeRequestFullState.  # noqa: E501


        :return: The source_repo_id of this MergeRequestFullState.  # noqa: E501
        :rtype: str
        """
        return self._source_repo_id

    @source_repo_id.setter
    def source_repo_id(self, source_repo_id):
        """Sets the source_repo_id of this MergeRequestFullState.


        :param source_repo_id: The source_repo_id of this MergeRequestFullState.  # noqa: E501
        :type: str
        """
        if source_repo_id is None:
            raise ValueError("Invalid value for `source_repo_id`, must not be `None`")  # noqa: E501

        self._source_repo_id = source_repo_id

    @property
    def target_repo_id(self):
        """Gets the target_repo_id of this MergeRequestFullState.  # noqa: E501


        :return: The target_repo_id of this MergeRequestFullState.  # noqa: E501
        :rtype: str
        """
        return self._target_repo_id

    @target_repo_id.setter
    def target_repo_id(self, target_repo_id):
        """Sets the target_repo_id of this MergeRequestFullState.


        :param target_repo_id: The target_repo_id of this MergeRequestFullState.  # noqa: E501
        :type: str
        """
        if target_repo_id is None:
            raise ValueError("Invalid value for `target_repo_id`, must not be `None`")  # noqa: E501

        self._target_repo_id = target_repo_id

    @property
    def title(self):
        """Gets the title of this MergeRequestFullState.  # noqa: E501


        :return: The title of this MergeRequestFullState.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MergeRequestFullState.


        :param title: The title of this MergeRequestFullState.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def merge_status(self):
        """Gets the merge_status of this MergeRequestFullState.  # noqa: E501


        :return: The merge_status of this MergeRequestFullState.  # noqa: E501
        :rtype: int
        """
        return self._merge_status

    @merge_status.setter
    def merge_status(self, merge_status):
        """Sets the merge_status of this MergeRequestFullState.


        :param merge_status: The merge_status of this MergeRequestFullState.  # noqa: E501
        :type: int
        """
        if merge_status is None:
            raise ValueError("Invalid value for `merge_status`, must not be `None`")  # noqa: E501

        self._merge_status = merge_status

    @property
    def description(self):
        """Gets the description of this MergeRequestFullState.  # noqa: E501


        :return: The description of this MergeRequestFullState.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MergeRequestFullState.


        :param description: The description of this MergeRequestFullState.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def author_id(self):
        """Gets the author_id of this MergeRequestFullState.  # noqa: E501


        :return: The author_id of this MergeRequestFullState.  # noqa: E501
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this MergeRequestFullState.


        :param author_id: The author_id of this MergeRequestFullState.  # noqa: E501
        :type: str
        """
        if author_id is None:
            raise ValueError("Invalid value for `author_id`, must not be `None`")  # noqa: E501

        self._author_id = author_id

    @property
    def changes(self):
        """Gets the changes of this MergeRequestFullState.  # noqa: E501


        :return: The changes of this MergeRequestFullState.  # noqa: E501
        :rtype: list[ChangePair]
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this MergeRequestFullState.


        :param changes: The changes of this MergeRequestFullState.  # noqa: E501
        :type: list[ChangePair]
        """
        if changes is None:
            raise ValueError("Invalid value for `changes`, must not be `None`")  # noqa: E501

        self._changes = changes

    @property
    def created_at(self):
        """Gets the created_at of this MergeRequestFullState.  # noqa: E501


        :return: The created_at of this MergeRequestFullState.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MergeRequestFullState.


        :param created_at: The created_at of this MergeRequestFullState.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this MergeRequestFullState.  # noqa: E501


        :return: The updated_at of this MergeRequestFullState.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MergeRequestFullState.


        :param updated_at: The updated_at of this MergeRequestFullState.  # noqa: E501
        :type: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MergeRequestFullState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MergeRequestFullState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
